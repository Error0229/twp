// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: test_temp.sql

package db

import (
	"context"
)

const deleteTestUser = `-- name: DeleteTestUser :exec

DELETE FROM "user" WHERE "username" = 'user0'
`

func (q *Queries) DeleteTestUser(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteTestUser)
	return err
}

const insertTestUser = `-- name: InsertTestUser :exec

INSERT INTO
    "user" (
        "username",
        "password",
        "name",
        "email",
        "address",
        "image_id",
        "role",
        "session_token",
        "credit_card"
    )
VALUES (
        'user0',
        'password0',
        'name0',
        'email0',
        'address0',
        '550e8400-e29b-41d4-a716-446655440000',
        'customer',
        'session_token0',
        '{"card_number": "card_number0", "expiration_date": "expiration_date0", "cvv": "cvv0"}'
    )
`

func (q *Queries) InsertTestUser(ctx context.Context) error {
	_, err := q.db.Exec(ctx, insertTestUser)
	return err
}

const searchTestUser = `-- name: SearchTestUser :one

SELECT id, username, password, name, email, address, image_id, role, session_token, credit_card FROM "user" WHERE "username" = 'user0'
`

func (q *Queries) SearchTestUser(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, searchTestUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.ImageID,
		&i.Role,
		&i.SessionToken,
		&i.CreditCard,
	)
	return i, err
}
