// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: seller.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCoupon = `-- name: DeleteCoupon :execrows

DELETE FROM "coupon" c
WHERE c."id" = $2 AND "shop_id" = (
        SELECT s."id"
        FROM "shop" s
        WHERE
            s."seller_name" = $1
            AND s."enabled" = true
    )
`

type DeleteCouponParams struct {
	SellerName string `json:"seller_name" param:"seller_name"`
	ID         int32  `json:"id" param:"id"`
}

func (q *Queries) DeleteCoupon(ctx context.Context, arg DeleteCouponParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCoupon, arg.SellerName, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteProduct = `-- name: DeleteProduct :execrows

UPDATE "product" p
SET
    "enabled" = false,
    "edit_date" = NOW()
WHERE "shop_id" = (
        SELECT s."id"
        FROM "shop" s
        WHERE
            s."seller_name" = $1
            AND s."enabled" = true
    )
    AND p."id" = $2
`

type DeleteProductParams struct {
	SellerName string `json:"seller_name" param:"seller_name"`
	ID         int32  `json:"id" param:"id"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteProduct, arg.SellerName, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getSellerInfo = `-- name: GetSellerInfo :one

SELECT s.id, s.seller_name, s.image_id, s.name, s.description, s.enabled
FROM "user" u
    JOIN "shop" s ON u.username = s.seller_name
WHERE u.id = $1
`

func (q *Queries) GetSellerInfo(ctx context.Context, id int32) (Shop, error) {
	row := q.db.QueryRow(ctx, getSellerInfo, id)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.SellerName,
		&i.ImageID,
		&i.Name,
		&i.Description,
		&i.Enabled,
	)
	return i, err
}

const haveTagName = `-- name: HaveTagName :one

SELECT
    CASE
        WHEN EXISTS (
            SELECT t.id, shop_id, t.name, s.id, seller_name, image_id, s.name, description, enabled
            FROM "tag" t
                LEFT JOIN "shop" s ON "shop_id" = s.id
            WHERE
                s."seller_name" = $1
                AND t."name" = $2
        ) THEN true
        ELSE false
    END
`

type HaveTagNameParams struct {
	SellerName string `json:"seller_name" param:"seller_name"`
	Name       string `json:"name"`
}

func (q *Queries) HaveTagName(ctx context.Context, arg HaveTagNameParams) (bool, error) {
	row := q.db.QueryRow(ctx, haveTagName, arg.SellerName, arg.Name)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const insertTag = `-- name: InsertTag :one

INSERT INTO
    "tag" ("shop_id", "name")
VALUES ( (
            SELECT s."id"
            FROM "shop" s
            WHERE
                s."seller_name" = $1
                AND s."enabled" = true
        ),
        $2
    ) ON CONFLICT ("shop_id", "name")
DO NOTHING
RETURNING "id", "name"
`

type InsertTagParams struct {
	SellerName string `json:"seller_name" param:"seller_name"`
	Name       string `json:"name"`
}

type InsertTagRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) InsertTag(ctx context.Context, arg InsertTagParams) (InsertTagRow, error) {
	row := q.db.QueryRow(ctx, insertTag, arg.SellerName, arg.Name)
	var i InsertTagRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const searchTag = `-- name: SearchTag :many

SELECT t."id", t."name"
FROM "tag" t
    LEFT JOIN "shop" s ON "shop_id" = s.id
    LEFT JOIN "user" u ON s.seller_name = u.username
WHERE u.id = $1 AND t."name" ~* $2
ORDER BY LENGTH(t."name")
LIMIT 10
`

type SearchTagParams struct {
	ID   int32  `json:"id" param:"id"`
	Name string `json:"name"`
}

type SearchTagRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) SearchTag(ctx context.Context, arg SearchTagParams) ([]SearchTagRow, error) {
	rows, err := q.db.Query(ctx, searchTag, arg.ID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchTagRow{}
	for rows.Next() {
		var i SearchTagRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sellerGetCoupon = `-- name: SellerGetCoupon :many

SELECT
    c."id",
    c."type",
    c."shop_id",
    c."name",
    c."discount",
    c."expire_date"
FROM "coupon" c
    JOIN "shop" s ON c."shop_id" = s.id
WHERE s.seller_name = $1
ORDER BY "start_date" DESC
LIMIT $2
OFFSET $3
`

type SellerGetCouponParams struct {
	SellerName string `json:"seller_name" param:"seller_name"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

type SellerGetCouponRow struct {
	ID         int32              `json:"id" param:"id"`
	Type       CouponType         `json:"type"`
	ShopID     int32              `json:"shop_id"`
	Name       string             `json:"name"`
	Discount   pgtype.Numeric     `json:"discount"`
	ExpireDate pgtype.Timestamptz `json:"expire_date"`
}

func (q *Queries) SellerGetCoupon(ctx context.Context, arg SellerGetCouponParams) ([]SellerGetCouponRow, error) {
	rows, err := q.db.Query(ctx, sellerGetCoupon, arg.SellerName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SellerGetCouponRow{}
	for rows.Next() {
		var i SellerGetCouponRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.ShopID,
			&i.Name,
			&i.Discount,
			&i.ExpireDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sellerGetCouponDetail = `-- name: SellerGetCouponDetail :many

SELECT c.id, c.type, c.shop_id, c.name, c.description, c.discount, c.start_date, c.expire_date
FROM "coupon" c
    JOIN "shop" s ON c."shop_id" = s.id
WHERE
    s."seller_name" = $1
    AND c."id" = $2
`

type SellerGetCouponDetailParams struct {
	SellerName string `json:"seller_name" param:"seller_name"`
	ID         int32  `json:"id" param:"id"`
}

func (q *Queries) SellerGetCouponDetail(ctx context.Context, arg SellerGetCouponDetailParams) ([]Coupon, error) {
	rows, err := q.db.Query(ctx, sellerGetCouponDetail, arg.SellerName, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coupon{}
	for rows.Next() {
		var i Coupon
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.ShopID,
			&i.Name,
			&i.Description,
			&i.Discount,
			&i.StartDate,
			&i.ExpireDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sellerGetOrder = `-- name: SellerGetOrder :many

SELECT
    "id",
    "shop_id",
    "shipment",
    "total_price",
    "status",
    "created_at"
FROM "order_history"
WHERE "shop_id" = (
        SELECT s."id"
        FROM "shop" s
        WHERE
            s."seller_name" = $1
            AND s."enabled" = true
    )
ORDER BY "created_at" DESC
LIMIT $2
OFFSET $3
`

type SellerGetOrderParams struct {
	SellerName string `json:"seller_name" param:"seller_name"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

type SellerGetOrderRow struct {
	ID         int32              `json:"id"`
	ShopID     int32              `json:"shop_id"`
	Shipment   int32              `json:"shipment"`
	TotalPrice int32              `json:"total_price"`
	Status     OrderStatus        `json:"status"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) SellerGetOrder(ctx context.Context, arg SellerGetOrderParams) ([]SellerGetOrderRow, error) {
	rows, err := q.db.Query(ctx, sellerGetOrder, arg.SellerName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SellerGetOrderRow{}
	for rows.Next() {
		var i SellerGetOrderRow
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Shipment,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sellerGetOrderDetail = `-- name: SellerGetOrderDetail :many

SELECT
    product_archive.id, product_archive.version, product_archive.name, product_archive.description, product_archive.price, product_archive.image_id,
    order_history.id, order_history.user_id, order_history.shop_id, order_history.shipment, order_history.total_price, order_history.status, order_history.created_at,
    order_detail.order_id, order_detail.product_id, order_detail.product_version, order_detail.quantity
FROM "order_detail"
    LEFT JOIN product_archive ON order_detail.product_id = product_archive.id AND order_detail.product_version = product_archive.version
    LEFT JOIN order_history ON order_history.id = order_detail.order_id
    LEFT JOIN shop ON order_history.shop_id = shop.id
WHERE
    shop.seller_name = $1
    OR order_detail.order_id = $2
`

type SellerGetOrderDetailParams struct {
	SellerName string `json:"seller_name" param:"seller_name"`
	OrderID    int32  `json:"order_id"`
}

type SellerGetOrderDetailRow struct {
	ID             pgtype.Int4        `json:"id"`
	Version        pgtype.Int4        `json:"version"`
	Name           pgtype.Text        `json:"name"`
	Description    pgtype.Text        `json:"description"`
	Price          pgtype.Numeric     `json:"price"`
	ImageID        pgtype.UUID        `json:"image_id"`
	ID_2           pgtype.Int4        `json:"id_2"`
	UserID         pgtype.Int4        `json:"user_id"`
	ShopID         pgtype.Int4        `json:"shop_id"`
	Shipment       pgtype.Int4        `json:"shipment"`
	TotalPrice     pgtype.Int4        `json:"total_price"`
	Status         NullOrderStatus    `json:"status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	OrderID        int32              `json:"order_id"`
	ProductID      int32              `json:"product_id"`
	ProductVersion int32              `json:"product_version"`
	Quantity       int32              `json:"quantity"`
}

func (q *Queries) SellerGetOrderDetail(ctx context.Context, arg SellerGetOrderDetailParams) ([]SellerGetOrderDetailRow, error) {
	rows, err := q.db.Query(ctx, sellerGetOrderDetail, arg.SellerName, arg.OrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SellerGetOrderDetailRow{}
	for rows.Next() {
		var i SellerGetOrderDetailRow
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.ImageID,
			&i.ID_2,
			&i.UserID,
			&i.ShopID,
			&i.Shipment,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
			&i.OrderID,
			&i.ProductID,
			&i.ProductVersion,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sellerInsertCoupon = `-- name: SellerInsertCoupon :one

INSERT INTO
    "coupon" (
        "type",
        "shop_id",
        "name",
        "description",
        "discount",
        "start_date",
        "expire_date"
    )
VALUES (
        $2, (
            SELECT s."id"
            FROM "shop" s
            WHERE
                s."seller_name" = $1
                AND s."enabled" = true
        ),
        $3,
        $4,
        $5,
        $6,
        $7
    )
RETURNING id, type, shop_id, name, description, discount, start_date, expire_date
`

type SellerInsertCouponParams struct {
	SellerName  string             `json:"seller_name" param:"seller_name"`
	Type        CouponType         `json:"type"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Discount    pgtype.Numeric     `json:"discount"`
	StartDate   pgtype.Timestamptz `json:"start_date"`
	ExpireDate  pgtype.Timestamptz `json:"expire_date"`
}

func (q *Queries) SellerInsertCoupon(ctx context.Context, arg SellerInsertCouponParams) (Coupon, error) {
	row := q.db.QueryRow(ctx, sellerInsertCoupon,
		arg.SellerName,
		arg.Type,
		arg.Name,
		arg.Description,
		arg.Discount,
		arg.StartDate,
		arg.ExpireDate,
	)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.ShopID,
		&i.Name,
		&i.Description,
		&i.Discount,
		&i.StartDate,
		&i.ExpireDate,
	)
	return i, err
}

const sellerInsertProduct = `-- name: SellerInsertProduct :one



INSERT INTO
    "product"(
        "version",
        "shop_id",
        "name",
        "description",
        "price",
        "image_id",
        "exp_date"
    )
VALUES (
        0, (
            SELECT s."id"
            FROM "shop" s
            WHERE
                s."seller_name" = $1
                AND s."enabled" = true
        ),
        $2,
        $3,
        $4,
        $5,
        $6
    )
RETURNING "id"
`

type SellerInsertProductParams struct {
	SellerName  string             `json:"seller_name" param:"seller_name"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Price       pgtype.Numeric     `json:"price"`
	ImageID     pgtype.UUID        `json:"image_id"`
	ExpDate     pgtype.Timestamptz `json:"exp_date"`
}

// SellerGetReport :many
// SellerGetReportDetail :many
func (q *Queries) SellerInsertProduct(ctx context.Context, arg SellerInsertProductParams) (int32, error) {
	row := q.db.QueryRow(ctx, sellerInsertProduct,
		arg.SellerName,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.ImageID,
		arg.ExpDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateCouponInfo = `-- name: UpdateCouponInfo :execrows

UPDATE "coupon" c
SET
    "type" = COALESCE($3, "type"),
    "name" = COALESCE($4, "name"),
    "description" = COALESCE($5, "description"),
    "discount" = COALESCE($6, "discount"),
    "start_date" = COALESCE($7, "start_date"),
    "expire_date" = COALESCE($8, "expire_date")
WHERE c."id" = $2 AND "shop_id" = (
        SELECT s."id"
        FROM "shop" s
        WHERE
            s."seller_name" = $1
            AND s."enabled" = true
    )
`

type UpdateCouponInfoParams struct {
	SellerName  string             `json:"seller_name" param:"seller_name"`
	ID          int32              `json:"id" param:"id"`
	Type        CouponType         `json:"type"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Discount    pgtype.Numeric     `json:"discount"`
	StartDate   pgtype.Timestamptz `json:"start_date"`
	ExpireDate  pgtype.Timestamptz `json:"expire_date"`
}

func (q *Queries) UpdateCouponInfo(ctx context.Context, arg UpdateCouponInfoParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateCouponInfo,
		arg.SellerName,
		arg.ID,
		arg.Type,
		arg.Name,
		arg.Description,
		arg.Discount,
		arg.StartDate,
		arg.ExpireDate,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateProductInfo = `-- name: UpdateProductInfo :execrows

UPDATE "product" p
SET
    "name" = COALESCE($3, "name"),
    "description" = COALESCE($4, "description"),
    "price" = COALESCE($5, "price"),
    "image_id" = COALESCE($6, "image_id"),
    "exp_date" = COALESCE($7, "exp_date"),
    "edit_date" = NOW(),
    "version" = "version" + 1
WHERE "shop_id" = (
        SELECT s."id"
        FROM "shop" s
        WHERE
            s."seller_name" = $1
            AND s."enabled" = true
    )
    AND p."id" = $2
`

type UpdateProductInfoParams struct {
	SellerName  string             `json:"seller_name" param:"seller_name"`
	ID          int32              `json:"id" param:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Price       pgtype.Numeric     `json:"price"`
	ImageID     pgtype.UUID        `json:"image_id"`
	ExpDate     pgtype.Timestamptz `json:"exp_date"`
}

func (q *Queries) UpdateProductInfo(ctx context.Context, arg UpdateProductInfoParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateProductInfo,
		arg.SellerName,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.ImageID,
		arg.ExpDate,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateSellerInfo = `-- name: UpdateSellerInfo :exec

UPDATE "shop"
SET
    "image_id" = COALESCE($2, "image_id"),
    "name" = COALESCE($3, "name"),
    "description" = COALESCE($4, "description"),
    "enabled" = COALESCE($5, "enabled")
WHERE "seller_name" IN (
        SELECT "username"
        FROM "user" u
        WHERE u.id = $1
    )
`

type UpdateSellerInfoParams struct {
	ID          int32       `json:"id" param:"id"`
	ImageID     pgtype.UUID `json:"image_id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
	Enabled     bool        `json:"enabled"`
}

func (q *Queries) UpdateSellerInfo(ctx context.Context, arg UpdateSellerInfoParams) error {
	_, err := q.db.Exec(ctx, updateSellerInfo,
		arg.ID,
		arg.ImageID,
		arg.Name,
		arg.Description,
		arg.Enabled,
	)
	return err
}
