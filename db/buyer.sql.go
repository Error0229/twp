// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: buyer.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCart = `-- name: GetCart :many

SELECT "id", "shop_id" FROM "cart" WHERE "user_id" = $1
`

type GetCartRow struct {
	ID     int32 `json:"id"`
	ShopID int32 `json:"shop_id"`
}

func (q *Queries) GetCart(ctx context.Context, userID int32) ([]GetCartRow, error) {
	rows, err := q.db.Query(ctx, getCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartRow{}
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(&i.ID, &i.ShopID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderHistory = `-- name: GetOrderHistory :many

SELECT
    "id",
    "shipment",
    "total_price",
    "status",
    "created_at"
FROM "order_history"
WHERE "user_id" = $1
`

type GetOrderHistoryRow struct {
	ID         int32              `json:"id"`
	Shipment   int32              `json:"shipment"`
	TotalPrice int32              `json:"total_price"`
	Status     OrderStatus        `json:"status"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetOrderHistory(ctx context.Context, userID int32) ([]GetOrderHistoryRow, error) {
	rows, err := q.db.Query(ctx, getOrderHistory, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderHistoryRow{}
	for rows.Next() {
		var i GetOrderHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Shipment,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductInCart = `-- name: GetProductInCart :many

SELECT
    "product_id",
    "quantity"
FROM "cart_product"
WHERE "cart_id" = $1
`

type GetProductInCartRow struct {
	ProductID int32 `json:"product_id"`
	Quantity  int32 `json:"quantity"`
}

func (q *Queries) GetProductInCart(ctx context.Context, cartID int32) ([]GetProductInCartRow, error) {
	rows, err := q.db.Query(ctx, getProductInCart, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductInCartRow{}
	for rows.Next() {
		var i GetProductInCartRow
		if err := rows.Scan(&i.ProductID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
