// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: admin.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCoupon = `-- name: AddCoupon :exec

INSERT INTO
    "coupon" (
        "id",
        "type",
        "shop_id",
        "name",
        "description",
        "discount",
        "start_date",
        "expire_date"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type AddCouponParams struct {
	ID          int32              `json:"id" params:"id"`
	Type        CouponType         `json:"type"`
	ShopID      int32              `json:"shop_id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Discount    pgtype.Numeric     `json:"discount"`
	StartDate   pgtype.Timestamptz `json:"start_date"`
	ExpireDate  pgtype.Timestamptz `json:"expire_date"`
}

func (q *Queries) AddCoupon(ctx context.Context, arg AddCouponParams) error {
	_, err := q.db.Exec(ctx, addCoupon,
		arg.ID,
		arg.Type,
		arg.ShopID,
		arg.Name,
		arg.Description,
		arg.Discount,
		arg.StartDate,
		arg.ExpireDate,
	)
	return err
}

const addUser = `-- name: AddUser :exec

INSERT INTO
    "user" (
        "username",
        "password",
        "name",
        "email",
        "address",
        "image_id",
        "role",
        "credit_card"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type AddUserParams struct {
	Username   string      `json:"username"`
	Password   string      `json:"password"`
	Name       string      `json:"name"`
	Email      string      `json:"email"`
	Address    string      `json:"address"`
	ImageID    pgtype.UUID `json:"image_id"`
	Role       RoleType    `json:"role"`
	CreditCard []byte      `json:"credit_card"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.Exec(ctx, addUser,
		arg.Username,
		arg.Password,
		arg.Name,
		arg.Email,
		arg.Address,
		arg.ImageID,
		arg.Role,
		arg.CreditCard,
	)
	return err
}

const deleteCoupon = `-- name: DeleteCoupon :exec

DELETE FROM "coupon" WHERE "id" = $1
`

func (q *Queries) DeleteCoupon(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCoupon, id)
	return err
}

const disableProductsFromShop = `-- name: DisableProductsFromShop :exec

UPDATE "product" AS p SET p."enabled" = FALSE WHERE p."shop_id" = $1
`

func (q *Queries) DisableProductsFromShop(ctx context.Context, shopID int32) error {
	_, err := q.db.Exec(ctx, disableProductsFromShop, shopID)
	return err
}

const disableShop = `-- name: DisableShop :exec

UPDATE "shop" AS s
SET s."enabled" = FALSE
WHERE s."seller_name" = $1
`

func (q *Queries) DisableShop(ctx context.Context, sellerName string) error {
	_, err := q.db.Exec(ctx, disableShop, sellerName)
	return err
}

const disableUser = `-- name: DisableUser :exec

UPDATE "user" SET "enabled" = FALSE WHERE "id" = $1
`

func (q *Queries) DisableUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, disableUser, id)
	return err
}

const editCoupon = `-- name: EditCoupon :exec

UPDATE "coupon"
SET
    "type" = COALESCE($2, "type"),
    "name" = COALESCE($3, "name"),
    "description" = COALESCE($4, "description"),
    "discount" = COALESCE($5, "discount"),
    "start_date" = COALESCE($6, "start_date"),
    "expire_date" = COALESCE($7, "expire_date")
WHERE "id" = $1
`

type EditCouponParams struct {
	ID          int32              `json:"id" params:"id"`
	Type        CouponType         `json:"type"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Discount    pgtype.Numeric     `json:"discount"`
	StartDate   pgtype.Timestamptz `json:"start_date"`
	ExpireDate  pgtype.Timestamptz `json:"expire_date"`
}

func (q *Queries) EditCoupon(ctx context.Context, arg EditCouponParams) error {
	_, err := q.db.Exec(ctx, editCoupon,
		arg.ID,
		arg.Type,
		arg.Name,
		arg.Description,
		arg.Discount,
		arg.StartDate,
		arg.ExpireDate,
	)
	return err
}

const getAnyCoupons = `-- name: GetAnyCoupons :many

SELECT id, type, shop_id, name, description, discount, start_date, expire_date FROM "coupon"
`

func (q *Queries) GetAnyCoupons(ctx context.Context) ([]Coupon, error) {
	rows, err := q.db.Query(ctx, getAnyCoupons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coupon{}
	for rows.Next() {
		var i Coupon
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.ShopID,
			&i.Name,
			&i.Description,
			&i.Discount,
			&i.StartDate,
			&i.ExpireDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCouponDetail = `-- name: GetCouponDetail :one

SELECT id, type, shop_id, name, description, discount, start_date, expire_date FROM "coupon" WHERE "id" = $1
`

func (q *Queries) GetCouponDetail(ctx context.Context, id int32) (Coupon, error) {
	row := q.db.QueryRow(ctx, getCouponDetail, id)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.ShopID,
		&i.Name,
		&i.Description,
		&i.Discount,
		&i.StartDate,
		&i.ExpireDate,
	)
	return i, err
}

const getReport = `-- name: GetReport :many

SELECT id, user_id, shop_id, shipment, total_price, status, created_at
FROM "order_history"
WHERE
    "created_at" >= $1
    AND "created_at" <= $2
`

type GetReportParams struct {
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
}

func (q *Queries) GetReport(ctx context.Context, arg GetReportParams) ([]OrderHistory, error) {
	rows, err := q.db.Query(ctx, getReport, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderHistory{}
	for rows.Next() {
		var i OrderHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ShopID,
			&i.Shipment,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many

SELECT id, username, password, name, email, address, image_id, role, credit_card, enabled FROM "user"
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Name,
			&i.Email,
			&i.Address,
			&i.ImageID,
			&i.Role,
			&i.CreditCard,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
