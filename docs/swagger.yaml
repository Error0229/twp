basePath: /api
definitions:
  auth.signupParams:
    properties:
      email:
        example: test@gmail.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: secretp@ssword123
        type: string
      username:
        example: john
        type: string
    type: object
  big.Int:
    type: object
  common.Cart:
    properties:
      products:
        items:
          $ref: '#/definitions/db.GetProductInCartRow'
        type: array
      seller_name:
        type: string
    type: object
  db.AddCouponParams:
    properties:
      description:
        type: string
      discount:
        type: number
      expire_date:
        type: string
      name:
        type: string
      scope:
        $ref: '#/definitions/db.CouponScope'
      start_date:
        type: string
      type:
        $ref: '#/definitions/db.CouponType'
    type: object
  db.AddCouponRow:
    properties:
      description:
        type: string
      discount:
        type: number
      expire_date:
        type: string
      name:
        type: string
      scope:
        $ref: '#/definitions/db.CouponScope'
      start_date:
        type: string
      type:
        $ref: '#/definitions/db.CouponType'
    type: object
  db.Coupon:
    properties:
      description:
        type: string
      discount:
        type: number
      expire_date:
        type: string
      name:
        type: string
      scope:
        $ref: '#/definitions/db.CouponScope'
      start_date:
        type: string
      type:
        $ref: '#/definitions/db.CouponType'
    type: object
  db.CouponScope:
    enum:
    - global
    - shop
    type: string
    x-enum-varnames:
    - CouponScopeGlobal
    - CouponScopeShop
  db.CouponType:
    enum:
    - percentage
    - fixed
    - shipping
    type: string
    x-enum-varnames:
    - CouponTypePercentage
    - CouponTypeFixed
    - CouponTypeShipping
  db.EditCouponParams:
    properties:
      description:
        type: string
      discount:
        type: number
      expire_date:
        type: string
      name:
        type: string
      start_date:
        type: string
      type:
        $ref: '#/definitions/db.CouponType'
    type: object
  db.EditCouponRow:
    properties:
      description:
        type: string
      discount:
        type: number
      expire_date:
        type: string
      name:
        type: string
      scope:
        $ref: '#/definitions/db.CouponScope'
      start_date:
        type: string
      type:
        $ref: '#/definitions/db.CouponType'
    type: object
  db.GetCouponDetailRow:
    properties:
      description:
        type: string
      discount:
        type: number
      expire_date:
        type: string
      name:
        type: string
      scope:
        $ref: '#/definitions/db.CouponScope'
      start_date:
        type: string
      type:
        $ref: '#/definitions/db.CouponType'
    type: object
  db.GetOrderHistoryRow:
    properties:
      id:
        type: integer
      shipment:
        type: integer
      status:
        $ref: '#/definitions/db.OrderStatus'
      total_price:
        type: integer
    type: object
  db.GetProductInCartRow:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  db.GetProductInfoRow:
    properties:
      description:
        type: string
      exp_date:
        $ref: '#/definitions/pgtype.Timestamptz'
      id:
        type: integer
      image_id:
        type: string
      name:
        type: string
      price:
        $ref: '#/definitions/pgtype.Numeric'
      sales:
        type: integer
      stock:
        type: integer
    type: object
  db.GetShopCouponsRow:
    properties:
      description:
        type: string
      discount:
        type: number
      expire_date:
        type: string
      name:
        type: string
      scope:
        $ref: '#/definitions/db.CouponScope'
      start_date:
        type: string
      type:
        $ref: '#/definitions/db.CouponType'
    type: object
  db.GetShopInfoRow:
    properties:
      description:
        type: string
      image_id:
        type: string
      name:
        type: string
      seller_name:
        type: string
    type: object
  db.GetTagInfoRow:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  db.GetUsersRow:
    properties:
      address:
        type: string
      credit_card:
        items:
          type: integer
        type: array
      email:
        type: string
      enabled:
        type: boolean
      name:
        type: string
      role:
        $ref: '#/definitions/db.RoleType'
      username:
        type: string
    type: object
  db.OrderStatus:
    enum:
    - pending
    - paid
    - shipped
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusPaid
    - OrderStatusShipped
    - OrderStatusDelivered
    - OrderStatusCancelled
  db.RoleType:
    enum:
    - admin
    - customer
    type: string
    x-enum-varnames:
    - RoleTypeAdmin
    - RoleTypeCustomer
  echo.HTTPError:
    properties:
      message: {}
    type: object
  pgtype.InfinityModifier:
    enum:
    - 1
    - 0
    - -1
    type: integer
    x-enum-varnames:
    - Infinity
    - Finite
    - NegativeInfinity
  pgtype.Numeric:
    properties:
      exp:
        type: integer
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      int:
        $ref: '#/definitions/big.Int'
      naN:
        type: boolean
      valid:
        type: boolean
    type: object
  pgtype.Timestamptz:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        type: string
      valid:
        type: boolean
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: twp server api.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: twp API
  version: 0.o
paths:
  /admin/coupon:
    get:
      description: Get all coupons (include shops' coupon).
      parameters:
      - default: 0
        description: Begin index
        in: query
        name: offset
        type: integer
      - default: 10
        description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Coupon'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Admin Get Coupon
      tags:
      - Admin
      - Coupon
    post:
      consumes:
      - application/json
      description: Add global coupon.
      parameters:
      - description: Coupon
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/db.AddCouponParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.AddCouponRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Admin Add Coupon
      tags:
      - Admin
      - Coupon
  /admin/coupon/{id}:
    delete:
      description: Delete coupon (include shops').
      parameters:
      - description: Coupon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Admin Delete Coupon
      tags:
      - Admin
      - Coupon
    get:
      description: Get coupon details.
      parameters:
      - description: Coupon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetCouponDetailRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Admin Get Coupon Detail
      tags:
      - Admin
      - Coupon
      - Shop
    patch:
      consumes:
      - application/json
      description: Edit any coupon.
      parameters:
      - description: Coupon ID
        in: path
        name: id
        required: true
        type: integer
      - description: Coupon
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/db.EditCouponParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.EditCouponRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Admin Edit Coupon
      tags:
      - Admin
      - Coupon
  /admin/report:
    get:
      description: Get site report.
      parameters:
      - description: Start date
        in: query
        name: start_date
        required: true
        type: string
      - description: End date
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: TODO
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Admin Get Site Report
      tags:
      - Admin
      - Report
  /admin/user:
    get:
      description: Get all user information. Include user's icon, name, email, created
        time and role.
      parameters:
      - default: 0
        description: Begin index
        in: query
        name: offset
        type: integer
      - default: 10
        description: limit
        in: query
        maximum: 20
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.GetUsersRow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Admin Get User
      tags:
      - Admin
      - User
  /admin/user/{username}:
    delete:
      description: Disable user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Admin Disable User
      tags:
      - Admin
      - User
  /buyer/cart:
    get:
      description: Get all Carts of the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.Cart'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Buyer Get Cart
      tags:
      - Buyer
      - Cart
  /buyer/cart/{cart_id}/checkout:
    get:
      description: Get all checkout data
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Buyer Get Checkout
      tags:
      - Buyer
      - Checkout
    post:
      consumes:
      - application/json
      description: Checkout
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Buyer Checkout
      tags:
      - Buyer
      - Checkout
  /buyer/cart/{cart_id}/coupon/{coupon_id}:
    delete:
      consumes:
      - application/json
      description: Delete coupon from cart
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: integer
      - description: Coupon ID
        in: path
        name: coupon_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Buyer Delete Coupon From Cart
      tags:
      - Buyer
      - Cart
      - Coupon
    post:
      consumes:
      - application/json
      description: Add coupon to cart
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: integer
      - description: Coupon ID
        in: path
        name: coupon_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Buyer Add Coupon To Cart
      tags:
      - Buyer
      - Cart
      - Coupon
  /buyer/cart/{cart_id}/product/{product_id}:
    delete:
      consumes:
      - application/json
      description: Delete product from cart
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Buyer Delete Product From Cart
      tags:
      - Buyer
      - Cart
    patch:
      consumes:
      - application/json
      description: Edit product quantity in cart
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Buyer Edit Product In Cart
      tags:
      - Buyer
      - Cart
    post:
      consumes:
      - application/json
      description: Add product to cart
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Buyer Add Product To Cart
      tags:
      - Buyer
      - Cart
  /buyer/order:
    get:
      description: Get all order history of the user
      parameters:
      - default: 0
        description: Begin index
        in: query
        name: offset
        type: integer
      - default: 10
        description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.GetOrderHistoryRow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Buyer Get Order History
      tags:
      - Buyer
      - Order
  /buyer/order/{id}:
    get:
      description: Get specific order detail
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Buyer Get Order Detail
      tags:
      - Buyer
      - Order
  /discover:
    get:
      consumes:
      - application/json
      description: Get discover content
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Get Discover
      tags:
      - Discover
      - Product
  /logout:
    post:
      description: Logout the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Logout
      tags:
      - Auth
  /news:
    get:
      consumes:
      - application/json
      description: Get news
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Get News
      tags:
      - News
  /news/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific news item by ID
      parameters:
      - description: News ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Get News Detail
      tags:
      - News
  /product/{id}:
    get:
      consumes:
      - application/json
      description: Get product information with product ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetProductInfoRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get Product Info
      tags:
      - Product
  /search:
    get:
      consumes:
      - application/json
      description: Search for products and shops
      parameters:
      - description: search word
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Search for Products and Shops
      tags:
      - Search
  /search/shop:
    get:
      consumes:
      - application/json
      description: Search for shops by name
      parameters:
      - description: Search Name
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Search for Shops by Name
      tags:
      - Search
      - Shop
  /seller:
    get:
      description: Get shop info, includes user picture, name, description.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller get shop info
      tags:
      - Seller
      - Shop
    patch:
      description: Edit shop name, description, visibility.
      parameters:
      - description: name search by q
        format: email
        in: query
        name: image_id
        type: string
      - description: name search by q
        format: email
        in: query
        name: name
        type: string
      - description: name search by q
        format: email
        in: query
        name: Description
        type: string
      - description: name search by q
        format: email
        in: query
        name: enable
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller edit shop info
      tags:
      - Seller
      - Shop
  /seller/coupon:
    get:
      description: Get all coupons for shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller get shop coupon
      tags:
      - Seller
      - Shop
      - Coupon
    post:
      consumes:
      - application/json
      description: Add coupon for shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller add coupon
      tags:
      - Seller
      - Shop
      - Coupon
  /seller/coupon/{id}:
    delete:
      consumes:
      - application/json
      description: Delete coupon for shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller delete coupon
      tags:
      - Seller
      - Shop
      - Coupon
    get:
      description: Get coupon detail by ID for shop.
      parameters:
      - description: Coupon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller get coupon detail
      tags:
      - Seller
      - Shop
      - Coupon
    patch:
      consumes:
      - application/json
      description: Edit coupon for shop.
      parameters:
      - description: Coupon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller edit coupon
      tags:
      - Seller
      - Shop
      - Coupon
  /seller/order:
    get:
      description: Get all orders for shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller get order
      tags:
      - Seller
      - Shop
      - Order
  /seller/order/{id}:
    get:
      description: Get order detail by ID for shop.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller get order detail
      tags:
      - Seller
      - Shop
      - Order
  /seller/product:
    post:
      consumes:
      - application/json
      description: Add product for shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller add product
      tags:
      - Seller
      - Shop
      - Product
  /seller/product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete product for shop.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller delete product
      tags:
      - Seller
      - Shop
      - Product
    patch:
      consumes:
      - application/json
      description: Edit product for shop.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller edit product
      tags:
      - Seller
      - Shop
      - Product
  /seller/product/{id}/upload:
    post:
      consumes:
      - image/png
      - image/jpeg
      - image/gif
      description: Upload product image for shop.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: image to upload
        in: formData
        name: img
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller upload product image
      tags:
      - Seller
      - Shop
      - Product
  /seller/report:
    get:
      description: Get all available reports for shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller get report
      tags:
      - Seller
      - Shop
      - Report
  /seller/report/{year}/{month}:
    get:
      description: Get report detail by year and month for shop.
      parameters:
      - description: Year
        in: path
        name: year
        required: true
        type: integer
      - description: Month
        in: path
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller get report detail
      tags:
      - Seller
      - Shop
      - Report
  /seller/tag:
    get:
      description: Get all available tags for shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller get available tag
      tags:
      - Seller
      - Shop
      - Tag
    post:
      consumes:
      - application/json
      description: Add tag for shop.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Seller add tag
      tags:
      - Seller
      - Shop
      - Tag
  /shop/{seller_name}:
    get:
      consumes:
      - application/json
      description: Get shop information with seller username
      parameters:
      - description: seller username
        in: path
        name: seller_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetShopInfoRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get Shop Info
      tags:
      - Shop
  /shop/{seller_name}/coupon:
    get:
      consumes:
      - application/json
      description: Get coupons for a shop with seller username
      parameters:
      - description: seller username
        in: path
        name: seller_name
        required: true
        type: string
      - default: 0
        description: Begin index
        in: query
        name: offset
        type: integer
      - default: 10
        description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.GetShopCouponsRow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get Shop Coupons
      tags:
      - Shop
      - Coupon
  /shop/{seller_name}/search:
    get:
      consumes:
      - application/json
      description: Search products within a shop by seller username
      parameters:
      - description: Seller username
        in: path
        name: seller_name
        required: true
        type: integer
      - description: search word
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Search Shop Products
      tags:
      - Shop
      - Product
      - Search
  /signup:
    post:
      description: signup
      parameters:
      - description: something
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.signupParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Customer signup
      tags:
      - User
  /tag/{id}:
    get:
      consumes:
      - application/json
      description: Get information about a tag by tag ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetTagInfoRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get Tag Info
      tags:
      - Tag
  /user:
    get:
      consumes:
      - application/json
      description: Get user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: User Get Info
      tags:
      - User
  /user/avatar:
    post:
      consumes:
      - image/png
      - image/jpeg
      - image/gif
      description: Upload user avatar
      parameters:
      - description: Image to upload
        in: formData
        name: img
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: User Upload Avatar
      tags:
      - User
  /user/edit:
    patch:
      consumes:
      - application/json
      description: Edit user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: User Edit Info
      tags:
      - User
  /user/password:
    post:
      consumes:
      - application/json
      description: Change user password
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: User Edit Password
      tags:
      - User
  /user/security/credit_card:
    get:
      consumes:
      - application/json
      description: Get all credit cards of the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: User Get Credit Card
      tags:
      - CreditCard
  /user/security/credit_card/add:
    post:
      consumes:
      - application/json
      description: Add a new credit card for the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: User Add Credit Card
      tags:
      - CreditCard
  /user/security/credit_card/delete:
    delete:
      consumes:
      - application/json
      description: Delete a credit card by its ID
      parameters:
      - description: Credit Card ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: User Delete Credit Card
      tags:
      - CreditCard
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
